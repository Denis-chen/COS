<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out_Files\ACH512.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out_Files\ACH512.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sat May 12 17:02:12 2018
<BR><P>
<H3>Maximum Stack Usage =       3796 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_boot &rArr; derived &rArr; bip32_key_from_parent_path &rArr; bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[21]">BCH_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BCH_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">BCH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">CCPWM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">DES_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">DMA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">ECC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">EFC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">EMW_IRQHandle</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">GPIOA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">GPIOB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">I2C_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">ISO7816MS_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">MS7816RST_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">NFM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">SDIO_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">SENSOR_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">SM4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">SPIA_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">SPIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">TIMER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">UARTA_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">UARTB_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">USB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">WAKEUP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[2a]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[29]">fputc</a> from uart.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[27]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3]">wally_internal_bzero</a> from internal.o(.text) referenced 2 times from internal.o(.data)
 <LI><a href="#[2]">wally_internal_free</a> from internal.o(.text) referenced 2 times from internal.o(.data)
 <LI><a href="#[1]">wally_internal_malloc</a> from internal.o(.text) referenced 2 times from internal.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[185]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[186]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[187]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[188]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[189]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BCH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EMW_IRQHandle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ISO7816MS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>MS7816RST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>NFM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>enable_module</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, system_ach512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng8
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[153]"></a>disable_module</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, system_ach512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng8
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[2e]"></a>clock_init_XOSC</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, system_ach512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clock_init_XOSC
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[18a]"></a>clock_init_ROSC</STRONG> (Thumb, 656 bytes, Stack size 24 bytes, system_ach512.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>clock_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_ach512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clock_init &rArr; clock_init_XOSC
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init_XOSC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32]"></a>cache_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_ach512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[18b]"></a>cache_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_ach512.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system_ach512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; clock_init &rArr; clock_init_XOSC
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_on
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_ach512.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>UARTA_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UARTB_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>uart_set_baud_rate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_set_baud_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[33]"></a>uart_init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_init &rArr; uart_set_baud_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baud_rate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>outbyte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
</UL>

<P><STRONG><a name="[38]"></a>uart_send_bytes</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[3a]"></a>printf_buff_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3b]"></a>printf_buff_word</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[30]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[18d]"></a>reverse_DWORD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>reverse_memory</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>hrng_entropy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hrng_entropy &rArr; hrng_initial
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
</UL>

<P><STRONG><a name="[3f]"></a>child_path_split</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = child_path_split &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[45]"></a>derived</STRONG> (Thumb, 358 bytes, Stack size 360 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3764<LI>Call Chain = derived &rArr; bip32_key_from_parent_path &rArr; bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_serialize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
</UL>

<P><STRONG><a name="[4c]"></a>keysign</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = keysign &rArr; wally_ec_sig_from_bytes &rArr; secp256k1_ecdsa_sign &rArr; ECDSA_sign &rArr; NN_Mod &rArr; NN_Div
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_from_bytes
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
</UL>

<P><STRONG><a name="[4e]"></a>init_boot</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3796<LI>Call Chain = init_boot &rArr; derived &rArr; bip32_key_from_parent_path &rArr; bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keysign
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_entropy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3796<LI>Call Chain = main &rArr; init_boot &rArr; derived &rArr; bip32_key_from_parent_path &rArr; bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[51]"></a>hmac_sha224_init</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224
</UL>

<P><STRONG><a name="[57]"></a>hmac_sha224_reinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[58]"></a>hmac_sha224_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224
</UL>

<P><STRONG><a name="[59]"></a>hmac_sha224_final</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224
</UL>

<P><STRONG><a name="[5c]"></a>hmac_sha224</STRONG> (Thumb, 62 bytes, Stack size 832 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_final
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
</UL>

<P><STRONG><a name="[5d]"></a>hmac_sha256_init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha256
</UL>

<P><STRONG><a name="[60]"></a>hmac_sha256_reinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[61]"></a>hmac_sha256_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha256
</UL>

<P><STRONG><a name="[62]"></a>hmac_sha256_final</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha256
</UL>

<P><STRONG><a name="[64]"></a>hmac_sha256</STRONG> (Thumb, 62 bytes, Stack size 832 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_update
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_impl
</UL>

<P><STRONG><a name="[65]"></a>hmac_sha384_init</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384
</UL>

<P><STRONG><a name="[69]"></a>hmac_sha384_reinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[6a]"></a>hmac_sha384_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384
</UL>

<P><STRONG><a name="[6b]"></a>hmac_sha384_final</STRONG> (Thumb, 54 bytes, Stack size 112 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_final
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384
</UL>

<P><STRONG><a name="[6d]"></a>hmac_sha384</STRONG> (Thumb, 62 bytes, Stack size 1600 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_final
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
</UL>

<P><STRONG><a name="[6e]"></a>hmac_sha512_init</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, hmac_sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha512
</UL>

<P><STRONG><a name="[72]"></a>hmac_sha512_reinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[73]"></a>hmac_sha512_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hmac_sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = hmac_sha512_update &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha512
</UL>

<P><STRONG><a name="[74]"></a>hmac_sha512_final</STRONG> (Thumb, 54 bytes, Stack size 144 bytes, hmac_sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = hmac_sha512_final &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_final
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha512
</UL>

<P><STRONG><a name="[76]"></a>hmac_sha512</STRONG> (Thumb, 62 bytes, Stack size 1600 bytes, hmac_sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2836<LI>Call Chain = hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_final
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_impl
</UL>

<P><STRONG><a name="[77]"></a>test</STRONG> (Thumb, 78 bytes, Stack size 152 bytes, hmac_sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7a]"></a>sha256_transf</STRONG> (Thumb, 598 bytes, Stack size 324 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha256_transf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
</UL>

<P><STRONG><a name="[63]"></a>sha256_final</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sha256_final &rArr; sha256_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[5f]"></a>sha256_update</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sha256_update &rArr; sha256_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_update
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[5e]"></a>sha256_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[4f]"></a>sha256</STRONG> (Thumb, 38 bytes, Stack size 184 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = sha256 &rArr; sha256_update &rArr; sha256_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hash160
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
</UL>

<P><STRONG><a name="[7b]"></a>sha512_transf</STRONG> (Thumb, 1034 bytes, Stack size 756 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = sha512_transf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_final
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_final
</UL>

<P><STRONG><a name="[75]"></a>sha512_final</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = sha512_final &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_transf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_final
</UL>

<P><STRONG><a name="[71]"></a>sha512_update</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_transf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_final
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
</UL>

<P><STRONG><a name="[70]"></a>sha512_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha512_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
</UL>

<P><STRONG><a name="[6f]"></a>sha512</STRONG> (Thumb, 38 bytes, Stack size 344 bytes, sha2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_final
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha512
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
</UL>

<P><STRONG><a name="[6c]"></a>sha384_final</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_transf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_final
</UL>

<P><STRONG><a name="[68]"></a>sha384_update</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_transf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_final
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
</UL>

<P><STRONG><a name="[67]"></a>sha384_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
</UL>

<P><STRONG><a name="[66]"></a>sha384</STRONG> (Thumb, 38 bytes, Stack size 344 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_final
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
</UL>

<P><STRONG><a name="[5a]"></a>sha224_final</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_final
</UL>

<P><STRONG><a name="[55]"></a>sha224_update</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_final
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_update
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
</UL>

<P><STRONG><a name="[54]"></a>sha224_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
</UL>

<P><STRONG><a name="[52]"></a>sha224</STRONG> (Thumb, 50 bytes, Stack size 184 bytes, sha2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
</UL>

<P><STRONG><a name="[82]"></a>bip32_key_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
</UL>

<P><STRONG><a name="[49]"></a>bip32_key_from_seed</STRONG> (Thumb, 164 bytes, Stack size 96 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2964<LI>Call Chain = bip32_key_from_seed &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_impl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_seed_len
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_hash160
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_pub_key
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_is_valid
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed_alloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[88]"></a>bip32_key_from_seed_alloc</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[4a]"></a>bip32_key_serialize</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bip32_key_serialize &rArr; key_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_valid
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_out
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_private
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[91]"></a>bip32_key_unserialize</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_key_fail
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_in
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_hash160
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_pub_key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_strip_private_key
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_is_valid
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be32_to_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize_alloc
</UL>

<P><STRONG><a name="[93]"></a>bip32_key_unserialize_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
</UL>

<P><STRONG><a name="[94]"></a>bip32_key_from_parent</STRONG> (Thumb, 442 bytes, Stack size 168 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3036<LI>Call Chain = bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_tweak_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_serialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_parse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_privkey_tweak_add
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_impl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_key_fail
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_hash160
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_pub_key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_strip_private_key
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_private
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_is_mainnet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_is_hardened
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_be32
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_alloc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path
</UL>

<P><STRONG><a name="[9b]"></a>bip32_key_from_parent_alloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[4b]"></a>bip32_key_from_parent_path</STRONG> (Thumb, 162 bytes, Stack size 368 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3404<LI>Call Chain = bip32_key_from_parent_path &rArr; bip32_key_from_parent &rArr; hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path_alloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[9c]"></a>bip32_key_from_parent_path_alloc</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path
</UL>

<P><STRONG><a name="[9d]"></a>bip32_key_init_alloc</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_hash160
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_pub_key
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9e]"></a>hmac_sha256_impl</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, hmac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[86]"></a>hmac_sha512_impl</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2868<LI>Call Chain = hmac_sha512_impl &rArr; hmac_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[83]"></a>wally_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wally_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free_string
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path_alloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed_alloc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_free
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
</UL>

<P><STRONG><a name="[7d]"></a>wally_clear</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wally_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha512
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_bzero
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free_string
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hash160
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_public_key_from_private_key
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path_alloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize_alloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed_alloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wipe_key_fail
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_strip_private_key
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_from_bytes
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
</UL>

<P><STRONG><a name="[9f]"></a>wally_free_string</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[a0]"></a>wally_bzero</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
</UL>

<P><STRONG><a name="[a1]"></a>wally_sha256</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a2]"></a>wally_sha256d</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
</UL>

<P><STRONG><a name="[a3]"></a>wally_sha512</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[81]"></a>wally_hash160</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = wally_hash160 &rArr; sha256 &rArr; sha256_update &rArr; sha256_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_hash160
</UL>

<P><STRONG><a name="[89]"></a>wally_malloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wally_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_strdup
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path_alloc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed_alloc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_from_bytes
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
</UL>

<P><STRONG><a name="[a7]"></a>wally_strdup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[18f]"></a>wally_ops</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>wally_get_operations</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>wally_set_operations</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>wally_clear_2</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wally_clear_2
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_verify
</UL>

<P><STRONG><a name="[192]"></a>wally_clear_3</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>wally_clear_4</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>wally_clear_5</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>wally_clear_6</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>wally_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>wally_cleanup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, internal.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>ripemd160_init</STRONG> (Thumb, 30 bytes, Stack size 104 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ripemd160_init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160
</UL>

<P><STRONG><a name="[be]"></a>ripemd160_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ripemd160_update &rArr; add &rArr; Transform &rArr; R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ripemd160
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be64
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be32
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be16
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le64
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le32
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le16
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_u64
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_u32
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_u16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_u8
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160
</UL>

<P><STRONG><a name="[c0]"></a>ripemd160_done</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ripemd160_done &rArr; add &rArr; Transform &rArr; R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_ripemd160
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le32
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le64
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160
</UL>

<P><STRONG><a name="[a4]"></a>ripemd160</STRONG> (Thumb, 46 bytes, Stack size 112 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ripemd160 &rArr; ripemd160_done &rArr; add &rArr; Transform &rArr; R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hash160
</UL>

<P><STRONG><a name="[c4]"></a>ripemd160_u8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[c5]"></a>ripemd160_u16</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[c6]"></a>ripemd160_u32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[c7]"></a>ripemd160_u64</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[c8]"></a>ripemd160_le16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le16
</UL>

<P><STRONG><a name="[ca]"></a>ripemd160_le32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le32
</UL>

<P><STRONG><a name="[cb]"></a>ripemd160_le64</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le64
</UL>

<P><STRONG><a name="[cc]"></a>ripemd160_be16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_be16
</UL>

<P><STRONG><a name="[ce]"></a>ripemd160_be32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_be32
</UL>

<P><STRONG><a name="[d0]"></a>ripemd160_be64</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_be64
</UL>

<P><STRONG><a name="[137]"></a>scalar_set_b32</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_tweak_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_privkey_tweak_add
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_verify
</UL>

<P><STRONG><a name="[13b]"></a>scalar_get_b32</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_tweak_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_privkey_tweak_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
</UL>

<P><STRONG><a name="[12e]"></a>secp256k1_ecdsa_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_para_initial
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_init
</UL>

<P><STRONG><a name="[97]"></a>secp256k1_ec_pubkey_parse</STRONG> (Thumb, 54 bytes, Stack size 104 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = secp256k1_ec_pubkey_parse &rArr; secp256k1_eckey_pubkey_parse &rArr; secp256k1_ge_set_xo_var &rArr; secp256k1_ge_set_xquad &rArr; secp256k1_fe_sqrt &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_save
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[99]"></a>secp256k1_ec_pubkey_serialize</STRONG> (Thumb, 78 bytes, Stack size 112 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = secp256k1_ec_pubkey_serialize &rArr; secp256k1_pubkey_load &rArr; secp256k1_ge_from_storage
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_load
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_public_key_from_private_key
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[134]"></a>secp256k1_ecdsa_signature_serialize_compact</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = secp256k1_ecdsa_signature_serialize_compact &rArr; secp256k1_ecdsa_signature_load
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_load
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_get_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_from_bytes
</UL>

<P><STRONG><a name="[136]"></a>secp256k1_ecdsa_verify</STRONG> (Thumb, 116 bytes, Stack size 200 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_para_initial
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_verify
</UL>

<P><STRONG><a name="[139]"></a>secp256k1_ecdsa_sign</STRONG> (Thumb, 120 bytes, Stack size 168 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = secp256k1_ecdsa_sign &rArr; ECDSA_sign &rArr; NN_Mod &rArr; NN_Div
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_para_initial
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_get_b32
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_from_bytes
</UL>

<P><STRONG><a name="[13c]"></a>secp256k1_ec_pubkey_create</STRONG> (Thumb, 110 bytes, Stack size 128 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = secp256k1_ec_pubkey_create &rArr; ECC_PM &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_para_initial
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_public_key_from_private_key
</UL>

<P><STRONG><a name="[96]"></a>secp256k1_ec_privkey_tweak_add</STRONG> (Thumb, 80 bytes, Stack size 136 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = secp256k1_ec_privkey_tweak_add &rArr; ECC_mod_add_sub &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_get_b32
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[98]"></a>secp256k1_ec_pubkey_tweak_add</STRONG> (Thumb, 76 bytes, Stack size 144 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = secp256k1_ec_pubkey_tweak_add &rArr; ECC_mod_add_sub &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_get_b32
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalar_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[13f]"></a>wally_ec_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sign.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_init
</UL>

<P><STRONG><a name="[7f]"></a>wally_ec_public_key_from_private_key</STRONG> (Thumb, 106 bytes, Stack size 96 bytes, sign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wally_ec_public_key_from_private_key &rArr; secp256k1_ec_pubkey_serialize &rArr; secp256k1_pubkey_load &rArr; secp256k1_ge_from_storage
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_serialize
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compute_pub_key
</UL>

<P><STRONG><a name="[4d]"></a>wally_ec_sig_from_bytes</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, sign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = wally_ec_sig_from_bytes &rArr; secp256k1_ecdsa_sign &rArr; ECDSA_sign &rArr; NN_Mod &rArr; NN_Div
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_ec_type
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_serialize_compact
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keysign
</UL>

<P><STRONG><a name="[141]"></a>wally_ec_sig_verify</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, sign.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear_2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_ec_type
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_verify
</UL>

<P><STRONG><a name="[142]"></a>wally_format_bitcoin_message</STRONG> (Thumb, 232 bytes, Stack size 312 bytes, sign.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varint_len
</UL>

<P><STRONG><a name="[145]"></a>char_to_hex</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_decode
</UL>

<P><STRONG><a name="[144]"></a>hex_decode</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, hex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_to_bytes
</UL>

<P><STRONG><a name="[146]"></a>hex_encode</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hex_encode &rArr; hexchar
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexchar
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_str_size
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_from_bytes
</UL>

<P><STRONG><a name="[149]"></a>wally_hex_from_bytes</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wally_hex_from_bytes &rArr; hex_encode &rArr; hexchar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_encode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_str_size
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
</UL>

<P><STRONG><a name="[14a]"></a>wally_hex_to_bytes</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_decode
</UL>

<P><STRONG><a name="[48]"></a>print_hexstr_key</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = print_hexstr_key &rArr; wally_hex_from_bytes &rArr; hex_encode &rArr; hexchar
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_from_bytes
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keysign
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[14e]"></a>pbkdf2_sha256</STRONG> (Thumb, 240 bytes, Stack size 896 bytes, pbkdf2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_update
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_hmac_sha256
</UL>

<P><STRONG><a name="[14f]"></a>pbkdf2_hmac_sha256</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, pbkdf2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha256
</UL>

<P><STRONG><a name="[150]"></a>pbkdf2_sha512</STRONG> (Thumb, 270 bytes, Stack size 1696 bytes, pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2932<LI>Call Chain = pbkdf2_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_final
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_update
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_hmac_sha512
</UL>

<P><STRONG><a name="[151]"></a>pbkdf2_hmac_sha512</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2980<LI>Call Chain = pbkdf2_hmac_sha512 &rArr; pbkdf2_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
</UL>

<P><STRONG><a name="[47]"></a>bip39_mnemonic_to_seed</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, bip39.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3060<LI>Call Chain = bip39_mnemonic_to_seed &rArr; pbkdf2_hmac_sha512 &rArr; pbkdf2_sha512 &rArr; hmac_sha512_init &rArr; sha512 &rArr; sha512_update &rArr; sha512_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_hmac_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
</UL>

<P><STRONG><a name="[152]"></a>get_hrng_16bytes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hrng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
</UL>

<P><STRONG><a name="[3d]"></a>hrng_initial</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hrng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hrng_initial
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng_16bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_entropy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updatek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[157]"></a>hrng_source_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hrng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updatek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[154]"></a>get_hrng8</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hrng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_hrng8
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
</UL>

<P><STRONG><a name="[155]"></a>get_hrng32</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hrng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_hrng32 &rArr; get_hrng8
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng8
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updatek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[198]"></a>hrng_poker_test</STRONG> (Thumb, 146 bytes, Stack size 100 bytes, hrng.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>get_hrng</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hrng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_hrng
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_source_disable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inter_hrng8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_entropy
</UL>

<P><STRONG><a name="[199]"></a>CalLength_B</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecdsa.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>Updatek</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_source_disable
</UL>

<P><STRONG><a name="[159]"></a>ECDSA_keypair</STRONG> (Thumb, 206 bytes, Stack size 136 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_source_disable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>

<P><STRONG><a name="[13a]"></a>ECDSA_sign</STRONG> (Thumb, 470 bytes, Stack size 440 bytes, ecdsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = ECDSA_sign &rArr; NN_Mod &rArr; NN_Div
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_initial
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod_variable_initial
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mul_me
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_source_disable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
</UL>

<P><STRONG><a name="[138]"></a>ECDSA_verify</STRONG> (Thumb, 464 bytes, Stack size 512 bytes, ecdsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_module
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_module
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod_variable_initial
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mul_me
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PA_PS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_verify
</UL>

<P><STRONG><a name="[162]"></a>ECC_mod_sqr</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_Digits
</UL>

<P><STRONG><a name="[166]"></a>ECC_mod_inv</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_Digits
</UL>

<P><STRONG><a name="[13e]"></a>ECC_mod_add_sub</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ECC_mod_add_sub &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_Digits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_tweak_add
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_privkey_tweak_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[12f]"></a>ECC_para_initial</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ECC_para_initial
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_verify
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_init
</UL>

<P><STRONG><a name="[13d]"></a>ECC_PM</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ECC_PM &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
</UL>

<P><STRONG><a name="[161]"></a>ECC_PA_PS</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[168]"></a>ECC_PD</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_AssignZero
</UL>

<P><STRONG><a name="[169]"></a>ECC_PJ</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
</UL>

<P><STRONG><a name="[16b]"></a>ecc_swap_qarray</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_red_dvm
</UL>

<P><STRONG><a name="[16a]"></a>ECC_red_dvm</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write0_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_Digits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_swap_qarray
</UL>

<P><STRONG><a name="[16d]"></a>clear_sram</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ecc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write0_SRAM
</UL>

<P><STRONG><a name="[19a]"></a>ecc_memcpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ecc_rom.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>ECC_write_SRAM</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ecc_rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ECC_write_SRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_rsa_enhance_mm_me
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_precal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_red_dvm
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PJ
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PD
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_inv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_sqr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mul_me
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PA_PS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>

<P><STRONG><a name="[16c]"></a>ECC_write0_SRAM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecc_rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sram
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_red_dvm
</UL>

<P><STRONG><a name="[164]"></a>ECC_read_SRAM</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecc_rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ECC_read_SRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_red_dvm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PD
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_inv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_sqr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mul_me
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PA_PS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>

<P><STRONG><a name="[16e]"></a>ECC_precal</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ecc_rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
</UL>

<P><STRONG><a name="[16f]"></a>ECC_rsa_enhance_mm_me</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ecc_rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
</UL>

<P><STRONG><a name="[165]"></a>ECC_NN_Digits</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ecc_rom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_red_dvm
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_inv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_sqr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mul_me
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_mod_add_sub
</UL>

<P><STRONG><a name="[160]"></a>ECC_mul_me</STRONG> (Thumb, 140 bytes, Stack size 36 bytes, ecc_rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ECC_mul_me &rArr; ECC_read_SRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_write_SRAM
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_read_SRAM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_NN_Digits
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[167]"></a>ECC_NN_AssignZero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ecc_rom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PD
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PA_PS
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PM
</UL>

<P><STRONG><a name="[19b]"></a>ecc_swap_array</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ecc_rom.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>alg2nor_sram</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ecc_rom.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>NN_ModInv_variable_initial</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>NNModMult_variable_initial</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>NN_Gcd_variable_initial</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>NN_Mod_variable_initial</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[15c]"></a>NN_Assign</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
</UL>

<P><STRONG><a name="[1a0]"></a>NN_RShift</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>NN_AssignZero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[174]"></a>NN_Sub</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
</UL>

<P><STRONG><a name="[15b]"></a>NN_Cmp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_keypair
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[1a1]"></a>NN_LShift</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>NN_Digits</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>NN_Div</STRONG> (Thumb, 896 bytes, Stack size 68 bytes, math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NN_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
</UL>

<P><STRONG><a name="[15e]"></a>NN_Mod</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NN_Mod &rArr; NN_Div
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[15f]"></a>NN_Zero</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_sign
</UL>

<P><STRONG><a name="[171]"></a>NN_Gcd</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[1a3]"></a>NN_Add</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>NN_Mult</STRONG> (Thumb, 344 bytes, Stack size 60 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
</UL>

<P><STRONG><a name="[172]"></a>NN_ModInv</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_strdup
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha512
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_sha256
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hash160
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_in
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_out
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_update
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_final
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_final
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_final
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha512
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha256
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_save
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_load
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_save
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_load
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_generate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_finalize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_reinit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_reinit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_reinit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_reinit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent_path
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_to_storage
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_neg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_eq_x_var
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_set_ge
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_globalz_set_table_gej
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_all_gej_var
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_var
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_neg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_all_var
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha512_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha384_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha224_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_internal_bzero
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_serialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_parse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_privkey_tweak_add
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_final
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384_final
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_final
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_pad
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_sign
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keysign
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_finalize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_initialize
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_finalize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[43]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
</UL>

<P><STRONG><a name="[42]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
</UL>

<P><STRONG><a name="[41]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_strdup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_free_string
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip39_mnemonic_to_seed
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_to_bytes
</UL>

<P><STRONG><a name="[79]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[40]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
</UL>

<P><STRONG><a name="[44]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child_path_split
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[17d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1ab]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ad]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[37]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hexstr_key
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_boot
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keysign
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derived
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrng_entropy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff_word
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_buff_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[180]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ae]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[78]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1af]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[a6]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_internal_free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_all_gej_var
</UL>

<P><STRONG><a name="[a5]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checked_malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_internal_malloc
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[35]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[34]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[8e]"></a>cpu_to_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_serialize
</UL>

<P><STRONG><a name="[92]"></a>be32_to_cpu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
</UL>

<P><STRONG><a name="[8d]"></a>mem_is_zero</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_valid
</UL>

<P><STRONG><a name="[95]"></a>child_is_hardened</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[85]"></a>version_is_valid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_valid
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[9a]"></a>version_is_mainnet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
</UL>

<P><STRONG><a name="[8c]"></a>key_is_private</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_valid
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_serialize
</UL>

<P><STRONG><a name="[7c]"></a>key_strip_private_key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_strip_private_key &rArr; wally_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
</UL>

<P><STRONG><a name="[7e]"></a>key_compute_pub_key</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = key_compute_pub_key &rArr; wally_ec_public_key_from_private_key &rArr; secp256k1_ec_pubkey_serialize &rArr; secp256k1_pubkey_load &rArr; secp256k1_ge_from_storage
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_public_key_from_private_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[80]"></a>key_compute_hash160</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = key_compute_hash160 &rArr; wally_hash160 &rArr; sha256 &rArr; sha256_update &rArr; sha256_transf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hash160
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[84]"></a>is_valid_seed_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bip32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_seed
</UL>

<P><STRONG><a name="[8a]"></a>copy_out</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_out
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_serialize
</UL>

<P><STRONG><a name="[8b]"></a>key_is_valid</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_is_private
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_is_valid
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_serialize
</UL>

<P><STRONG><a name="[8f]"></a>copy_in</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bip32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
</UL>

<P><STRONG><a name="[90]"></a>wipe_key_fail</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bip32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wipe_key_fail &rArr; wally_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_from_parent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip32_key_unserialize
</UL>

<P><STRONG><a name="[3]"></a>wally_internal_bzero</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wally_internal_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internal.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>wally_internal_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wally_internal_malloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internal.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>wally_internal_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wally_internal_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internal.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>cpu_to_le64</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le64
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
</UL>

<P><STRONG><a name="[c2]"></a>cpu_to_le32</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le32
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
</UL>

<P><STRONG><a name="[c9]"></a>cpu_to_le16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_le16
</UL>

<P><STRONG><a name="[ba]"></a>le32_to_cpu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[d1]"></a>cpu_to_be64</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be64
</UL>

<P><STRONG><a name="[cf]"></a>cpu_to_be32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be32
</UL>

<P><STRONG><a name="[cd]"></a>cpu_to_be16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ripemd160.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_be16
</UL>

<P><STRONG><a name="[c3]"></a>invalidate_ripemd160</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
</UL>

<P><STRONG><a name="[bf]"></a>check_ripemd160</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[ab]"></a>f1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R52
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R11
</UL>

<P><STRONG><a name="[ad]"></a>f2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f2
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R42
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R21
</UL>

<P><STRONG><a name="[af]"></a>f3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f3
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R32
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R31
</UL>

<P><STRONG><a name="[b1]"></a>f4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R22
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R41
</UL>

<P><STRONG><a name="[b3]"></a>f5</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = f5
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R12
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R51
</UL>

<P><STRONG><a name="[a9]"></a>rol</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ripemd160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
</UL>

<P><STRONG><a name="[a8]"></a>Round</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R52
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R42
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R32
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R22
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R12
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R51
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R41
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R31
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R21
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R11
</UL>

<P><STRONG><a name="[aa]"></a>R11</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R11 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[ac]"></a>R21</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R21 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[ae]"></a>R31</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R31 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f3
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b0]"></a>R41</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R41 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b2]"></a>R51</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R51 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b4]"></a>R12</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R12 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f5
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b5]"></a>R22</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R22 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b6]"></a>R32</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R32 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f3
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b7]"></a>R42</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R42 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f2
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b8]"></a>R52</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[b9]"></a>Transform</STRONG> (Thumb, 4220 bytes, Stack size 136 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Transform &rArr; R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R52
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R42
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R32
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R22
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R12
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R51
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R41
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R31
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R21
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R11
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le32_to_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
</UL>

<P><STRONG><a name="[bb]"></a>add</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ripemd160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = add &rArr; Transform &rArr; R52 &rArr; Round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_done
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_update
</UL>

<P><STRONG><a name="[d3]"></a>secp256k1_callback_call</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checked_malloc
</UL>

<P><STRONG><a name="[d2]"></a>checked_malloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_callback_call
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_all_gej_var
</UL>

<P><STRONG><a name="[118]"></a>secp256k1_fe_normalize</STRONG> (Thumb, 424 bytes, Stack size 44 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = secp256k1_fe_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_to_storage
</UL>

<P><STRONG><a name="[f8]"></a>secp256k1_fe_normalize_weak</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = secp256k1_fe_normalize_weak
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_neg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_eq_x_var
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_neg
</UL>

<P><STRONG><a name="[105]"></a>secp256k1_fe_normalize_var</STRONG> (Thumb, 448 bytes, Stack size 44 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = secp256k1_fe_normalize_var
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_serialize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xo_var
</UL>

<P><STRONG><a name="[db]"></a>secp256k1_fe_normalizes_to_zero</STRONG> (Thumb, 256 bytes, Stack size 44 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = secp256k1_fe_normalizes_to_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
</UL>

<P><STRONG><a name="[dd]"></a>secp256k1_fe_normalizes_to_zero_var</STRONG> (Thumb, 288 bytes, Stack size 44 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = secp256k1_fe_normalizes_to_zero_var
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>

<P><STRONG><a name="[fa]"></a>secp256k1_fe_set_int</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_set_ge
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_var
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej
</UL>

<P><STRONG><a name="[116]"></a>secp256k1_fe_is_zero</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_rescale
</UL>

<P><STRONG><a name="[106]"></a>secp256k1_fe_is_odd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_serialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xo_var
</UL>

<P><STRONG><a name="[100]"></a>secp256k1_fe_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_set_infinity
</UL>

<P><STRONG><a name="[12a]"></a>secp256k1_fe_set_b32</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = secp256k1_fe_set_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
</UL>

<P><STRONG><a name="[12d]"></a>secp256k1_fe_get_b32</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = secp256k1_fe_get_b32
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_serialize
</UL>

<P><STRONG><a name="[d9]"></a>secp256k1_fe_negate</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = secp256k1_fe_negate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xo_var
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_neg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>

<P><STRONG><a name="[10b]"></a>secp256k1_fe_mul_int</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
</UL>

<P><STRONG><a name="[da]"></a>secp256k1_fe_add</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>

<P><STRONG><a name="[d5]"></a>secp256k1_fe_mul_inner</STRONG> (Thumb, 3688 bytes, Stack size 156 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = secp256k1_fe_mul_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
</UL>

<P><STRONG><a name="[d7]"></a>secp256k1_fe_sqr_inner</STRONG> (Thumb, 2836 bytes, Stack size 152 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = secp256k1_fe_sqr_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
</UL>

<P><STRONG><a name="[d4]"></a>secp256k1_fe_mul</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_has_quad_y_var
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_rescale
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_eq_x_var
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_globalz_set_table_gej
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_table_gej_var
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_var
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_zinv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_all_var
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>

<P><STRONG><a name="[d6]"></a>secp256k1_fe_sqr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = secp256k1_fe_sqr &rArr; secp256k1_fe_sqr_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_rescale
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_eq_x_var
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_var
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_zinv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>

<P><STRONG><a name="[114]"></a>secp256k1_fe_cmov</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge
</UL>

<P><STRONG><a name="[11d]"></a>secp256k1_fe_storage_cmov</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_storage_cmov
</UL>

<P><STRONG><a name="[119]"></a>secp256k1_fe_to_storage</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_to_storage
</UL>

<P><STRONG><a name="[11b]"></a>secp256k1_fe_from_storage</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_from_storage
</UL>

<P><STRONG><a name="[d8]"></a>secp256k1_fe_equal</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = secp256k1_fe_equal &rArr; secp256k1_fe_normalizes_to_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>

<P><STRONG><a name="[dc]"></a>secp256k1_fe_equal_var</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = secp256k1_fe_equal_var &rArr; secp256k1_fe_normalizes_to_zero_var
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero_var
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_valid_var
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_eq_x_var
</UL>

<P><STRONG><a name="[de]"></a>secp256k1_fe_sqrt</STRONG> (Thumb, 494 bytes, Stack size 496 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = secp256k1_fe_sqrt &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_quad_var
</UL>

<P><STRONG><a name="[df]"></a>secp256k1_fe_inv</STRONG> (Thumb, 512 bytes, Stack size 496 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_table_gej_var
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_var
</UL>

<P><STRONG><a name="[e0]"></a>secp256k1_fe_inv_var</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_var
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_all_var
</UL>

<P><STRONG><a name="[e1]"></a>secp256k1_fe_inv_all_var</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_var
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_all_gej_var
</UL>

<P><STRONG><a name="[e2]"></a>secp256k1_fe_is_quad_var</STRONG> (Thumb, 18 bytes, Stack size 48 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_has_quad_y_var
</UL>

<P><STRONG><a name="[e4]"></a>secp256k1_scalar_get_bits</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_get_bits_var
</UL>

<P><STRONG><a name="[e3]"></a>secp256k1_scalar_get_bits_var</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_get_bits
</UL>

<P><STRONG><a name="[e6]"></a>secp256k1_scalar_check_overflow</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce_512
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_set_b32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_add
</UL>

<P><STRONG><a name="[e7]"></a>secp256k1_scalar_reduce</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce_512
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_set_b32
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_add
</UL>

<P><STRONG><a name="[e5]"></a>secp256k1_scalar_add</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_check_overflow
</UL>

<P><STRONG><a name="[f2]"></a>secp256k1_scalar_cadd_bit</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul_shift_var
</UL>

<P><STRONG><a name="[e8]"></a>secp256k1_scalar_set_b32</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_check_overflow
</UL>

<P><STRONG><a name="[135]"></a>secp256k1_scalar_get_b32</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_serialize_compact
</UL>

<P><STRONG><a name="[ea]"></a>secp256k1_scalar_is_zero</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_cond_negate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_negate
</UL>

<P><STRONG><a name="[e9]"></a>secp256k1_scalar_negate</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_is_zero
</UL>

<P><STRONG><a name="[eb]"></a>secp256k1_scalar_cond_negate</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_is_zero
</UL>

<P><STRONG><a name="[ec]"></a>secp256k1_scalar_reduce_512</STRONG> (Thumb, 6240 bytes, Stack size 176 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_check_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_sqr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul
</UL>

<P><STRONG><a name="[ee]"></a>secp256k1_scalar_mul_512</STRONG> (Thumb, 5650 bytes, Stack size 48 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul_shift_var
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul
</UL>

<P><STRONG><a name="[f0]"></a>secp256k1_scalar_sqr_512</STRONG> (Thumb, 5768 bytes, Stack size 48 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_sqr
</UL>

<P><STRONG><a name="[ed]"></a>secp256k1_scalar_mul</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul_512
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce_512
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_inverse
</UL>

<P><STRONG><a name="[ef]"></a>secp256k1_scalar_sqr</STRONG> (Thumb, 28 bytes, Stack size 80 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_sqr_512
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_reduce_512
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_inverse
</UL>

<P><STRONG><a name="[f1]"></a>secp256k1_scalar_mul_shift_var</STRONG> (Thumb, 398 bytes, Stack size 96 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul_512
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_cadd_bit
</UL>

<P><STRONG><a name="[f3]"></a>secp256k1_scalar_inverse</STRONG> (Thumb, 1234 bytes, Stack size 376 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_sqr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_inverse_var
</UL>

<P><STRONG><a name="[f4]"></a>secp256k1_scalar_inverse_var</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_scalar_inverse
</UL>

<P><STRONG><a name="[f5]"></a>secp256k1_ge_set_gej_zinv</STRONG> (Thumb, 60 bytes, Stack size 96 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_globalz_set_table_gej
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_table_gej_var
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_all_gej_var
</UL>

<P><STRONG><a name="[f6]"></a>secp256k1_ge_set_xy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = secp256k1_ge_set_xy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
</UL>

<P><STRONG><a name="[12c]"></a>secp256k1_ge_is_infinity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, secp256k1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_serialize
</UL>

<P><STRONG><a name="[f7]"></a>secp256k1_ge_neg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f9]"></a>secp256k1_ge_set_gej</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
</UL>

<P><STRONG><a name="[fb]"></a>secp256k1_ge_set_gej_var</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_var
</UL>

<P><STRONG><a name="[fc]"></a>secp256k1_ge_set_all_gej_var</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checked_malloc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_zinv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv_all_var
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[fd]"></a>secp256k1_ge_set_table_gej_var</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_zinv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_inv
</UL>

<P><STRONG><a name="[fe]"></a>secp256k1_ge_globalz_set_table_gej</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_gej_zinv
</UL>

<P><STRONG><a name="[ff]"></a>secp256k1_gej_set_infinity</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_clear
</UL>

<P><STRONG><a name="[101]"></a>secp256k1_gej_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_clear
</UL>

<P><STRONG><a name="[102]"></a>secp256k1_ge_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = secp256k1_ge_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_parse
</UL>

<P><STRONG><a name="[103]"></a>secp256k1_ge_set_xquad</STRONG> (Thumb, 70 bytes, Stack size 136 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = secp256k1_ge_set_xquad &rArr; secp256k1_fe_sqrt &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xo_var
</UL>

<P><STRONG><a name="[104]"></a>secp256k1_ge_set_xo_var</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = secp256k1_ge_set_xo_var &rArr; secp256k1_ge_set_xquad &rArr; secp256k1_fe_sqrt &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_odd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_var
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xquad
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
</UL>

<P><STRONG><a name="[107]"></a>secp256k1_gej_set_ge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
</UL>

<P><STRONG><a name="[108]"></a>secp256k1_gej_eq_x_var</STRONG> (Thumb, 60 bytes, Stack size 96 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>

<P><STRONG><a name="[109]"></a>secp256k1_gej_neg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[10f]"></a>secp256k1_gej_is_infinity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_nonzero
</UL>

<P><STRONG><a name="[10a]"></a>secp256k1_gej_is_valid_var</STRONG> (Thumb, 104 bytes, Stack size 168 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>

<P><STRONG><a name="[10c]"></a>secp256k1_ge_is_valid_var</STRONG> (Thumb, 76 bytes, Stack size 128 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = secp256k1_ge_is_valid_var &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_equal_var
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_eckey_pubkey_parse
</UL>

<P><STRONG><a name="[10d]"></a>secp256k1_gej_double_var</STRONG> (Thumb, 252 bytes, Stack size 176 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_zinv_var
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_ge_var
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_add_var
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_nonzero
</UL>

<P><STRONG><a name="[10e]"></a>secp256k1_gej_double_nonzero</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_is_infinity
</UL>

<P><STRONG><a name="[110]"></a>secp256k1_gej_add_var</STRONG> (Thumb, 418 bytes, Stack size 504 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero_var
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
</UL>

<P><STRONG><a name="[111]"></a>secp256k1_gej_add_ge_var</STRONG> (Thumb, 394 bytes, Stack size 464 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero_var
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_set_ge
</UL>

<P><STRONG><a name="[112]"></a>secp256k1_gej_add_zinv_var</STRONG> (Thumb, 430 bytes, Stack size 584 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_int
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero_var
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_gej_double_var
</UL>

<P><STRONG><a name="[113]"></a>secp256k1_gej_add_ge</STRONG> (Thumb, 492 bytes, Stack size 552 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_cmov
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_add
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_negate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalizes_to_zero
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_weak
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[115]"></a>secp256k1_gej_rescale</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_sqr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_zero
</UL>

<P><STRONG><a name="[117]"></a>secp256k1_ge_to_storage</STRONG> (Thumb, 68 bytes, Stack size 96 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = secp256k1_ge_to_storage &rArr; secp256k1_fe_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_to_storage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_save
</UL>

<P><STRONG><a name="[11a]"></a>secp256k1_ge_from_storage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = secp256k1_ge_from_storage
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_from_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_pubkey_load
</UL>

<P><STRONG><a name="[11c]"></a>secp256k1_ge_storage_cmov</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_storage_cmov
</UL>

<P><STRONG><a name="[11e]"></a>secp256k1_gej_has_quad_y_var</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_mul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_quad_var
</UL>

<P><STRONG><a name="[123]"></a>secp256k1_sha256_initialize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[120]"></a>secp256k1_sha256_transform</STRONG> (Thumb, 12136 bytes, Stack size 116 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
</UL>

<P><STRONG><a name="[11f]"></a>secp256k1_sha256_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_finalize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_finalize
</UL>

<P><STRONG><a name="[121]"></a>secp256k1_sha256_finalize</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_finalize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[122]"></a>secp256k1_hmac_sha256_initialize</STRONG> (Thumb, 164 bytes, Stack size 184 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_finalize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_generate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[124]"></a>secp256k1_hmac_sha256_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_generate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[125]"></a>secp256k1_hmac_sha256_finalize</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_finalize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_sha256_write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_generate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_rfc6979_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[126]"></a>secp256k1_rfc6979_hmac_sha256_initialize</STRONG> (Thumb, 202 bytes, Stack size 216 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_finalize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[127]"></a>secp256k1_rfc6979_hmac_sha256_generate</STRONG> (Thumb, 156 bytes, Stack size 224 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_finalize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_hmac_sha256_initialize
</UL>

<P><STRONG><a name="[128]"></a>secp256k1_rfc6979_hmac_sha256_finalize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[129]"></a>secp256k1_eckey_pubkey_parse</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = secp256k1_eckey_pubkey_parse &rArr; secp256k1_ge_set_xo_var &rArr; secp256k1_ge_set_xquad &rArr; secp256k1_fe_sqrt &rArr; secp256k1_fe_mul &rArr; secp256k1_fe_mul_inner
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_set_b32
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_odd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_valid_var
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xo_var
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_set_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_parse
</UL>

<P><STRONG><a name="[12b]"></a>secp256k1_eckey_pubkey_serialize</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = secp256k1_eckey_pubkey_serialize &rArr; secp256k1_fe_normalize_var
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_get_b32
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_is_odd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_fe_normalize_var
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_is_infinity
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_serialize
</UL>

<P><STRONG><a name="[130]"></a>secp256k1_pubkey_load</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = secp256k1_pubkey_load &rArr; secp256k1_ge_from_storage
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_from_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_serialize
</UL>

<P><STRONG><a name="[131]"></a>secp256k1_pubkey_save</STRONG> (Thumb, 30 bytes, Stack size 80 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = secp256k1_pubkey_save &rArr; secp256k1_ge_to_storage &rArr; secp256k1_fe_normalize
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ge_to_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ec_pubkey_parse
</UL>

<P><STRONG><a name="[132]"></a>secp256k1_ecdsa_signature_load</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, secp256k1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = secp256k1_ecdsa_signature_load
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256k1_ecdsa_signature_serialize_compact
</UL>

<P><STRONG><a name="[133]"></a>secp256k1_ecdsa_signature_save</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, secp256k1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[140]"></a>is_valid_ec_type</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sign.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_from_bytes
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_ec_sig_verify
</UL>

<P><STRONG><a name="[143]"></a>varint_len</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sign.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_format_bitcoin_message
</UL>

<P><STRONG><a name="[147]"></a>hex_str_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wally_hex_from_bytes
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_encode
</UL>

<P><STRONG><a name="[148]"></a>hexchar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hexchar
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_encode
</UL>

<P><STRONG><a name="[14c]"></a>write32_be</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pbkdf2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md_pad
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write64_be
</UL>

<P><STRONG><a name="[14b]"></a>write64_be</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbkdf2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32_be
</UL>

<P><STRONG><a name="[14d]"></a>md_pad</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbkdf2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write32_be
</UL>

<P><STRONG><a name="[156]"></a>get_inter_hrng8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hrng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hrng
</UL>

<P><STRONG><a name="[17f]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[183]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[181]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
